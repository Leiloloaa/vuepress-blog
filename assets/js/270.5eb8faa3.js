(window.webpackJsonp=window.webpackJsonp||[]).push([[270],{732:function(t,s,a){"use strict";a.r(s);var n=a(35),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_10张图、10分钟-包你学会-vue3-的-左右互博"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10张图、10分钟-包你学会-vue3-的-左右互博"}},[t._v("#")]),t._v(" 10张图、10分钟，包你学会 Vue3 的“左右互博”")]),t._v(" "),a("p",[t._v("话说在"),a("code",[t._v("射雕三部曲")]),t._v("中论哪门武功比较有意思，笔者认为左右互博应该可以加入群聊。你也可以尝试一下左手画圆、右手画方，看看是不是歪七扭八的。咳咳，再说下去你都会给笔者几鞭子。咱们还是讨论一下 Vue3 的左右互博之术吧！")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c49cd738d3b04716ab038d07738f775b~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),t._v(" "),a("p",[a("strong",[t._v("声明：左右互博 ≈ 双端对比")])]),t._v(" "),a("p",[t._v("进入正题之前，笔者认为有必要复习虚拟 dom 和 diff 算法，来，客官请接招~")]),t._v(" "),a("p",[a("strong",[t._v("前置知识")])]),t._v(" "),a("ul",[a("li",[t._v("虚拟 dom\n"),a("ul",[a("li",[a("code",[t._v("是一个对象")]),t._v("，我们将真实的 dom 通过某种方式转换成一个 对象")]),t._v(" "),a("li",[t._v("对象的好处就是"),a("code",[t._v("跨平台")]),t._v("，如今的 json 就是最好的例子")]),t._v(" "),a("li",[t._v("操作虚拟 dom 和 操作真实 dom 哪个快（有时间可以阅读一下 "),a("a",{attrs:{href:"https://www.zhihu.com/question/31809713",target:"_blank",rel:"noopener noreferrer"}},[t._v("尤大的知乎回答"),a("OutboundLink")],1),t._v("），简言之，纯看速度真实DOM > 虚拟DOM，后者需要对比得出差异才更新。但是基于性能来说"),a("code",[t._v("差异更新")]),t._v("要比"),a("code",[t._v("全量更新")]),t._v("产生的"),a("code",[t._v("代价更便宜")])])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62de6f2f6eff42c08a6a4fa354405a46~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),t._v(" "),a("ul",[a("li",[t._v("diff 算法\n"),a("ul",[a("li",[t._v("Vue3 是通过"),a("code",[t._v("双端对比")]),t._v("+"),a("code",[t._v("最长递增子序列")]),t._v("算法得出最小的更新消耗")]),t._v(" "),a("li",[t._v("双端对比：两个指针一个从前面开始，一个从后面开始，得出中间改变的部分")]),t._v(" "),a("li",[t._v("最长递增子序列：中间乱序部分，通过新老对比得出新的节点中"),a("code",[t._v("元素")]),t._v("与老节点中"),a("code",[t._v("相对位置")]),t._v("不需要改变的序列")])])])]),t._v(" "),a("p",[a("strong",[t._v("亮剑：常见的更新问题")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/faeab34c60974332bb3293369e440b18~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),t._v(" "),a("p",[t._v("为了节约大家的时间以及 diff 算法主要运用在第四种情况，所以在本文笔者与你一起讨论 old array => new array。")]),t._v(" "),a("p",[a("strong",[t._v("举个🌰")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7c5ec73ef524371a72f8b5bf96fbd20~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),t._v(" "),a("p",[t._v("如图所示，变化无非有以下三种：")]),t._v(" "),a("ul",[a("li",[t._v("移动，c、d、e 位置不一样了")]),t._v(" "),a("li",[t._v("删除，f 不存在了")]),t._v(" "),a("li",[t._v("新增，e 是新加的")])]),t._v(" "),a("p",[t._v("那么，我们要怎样确定那些元素变动了呢？又是从哪个元素开始变动的？")]),t._v(" "),a("p",[a("strong",[t._v("任务拆解")])]),t._v(" "),a("ul",[a("li",[t._v("确定左边开始变动的位置 => 左序遍历")]),t._v(" "),a("li",[t._v("确定右边开始变动的位置 => 右序遍历")])]),t._v(" "),a("p",[t._v("Vue 提供了一种方案 => 双端对比算法，也就是咱们开头说的左右互博，具体的看下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4dde9376a25749be97f8b8770d3d7355~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),t._v(" "),a("p",[t._v("三个指针 i、e1、e2，i 表示从左边开始变动的位置，e1 和 e2 分别表示新老节点从右边开始变动的位置。通过循环 new tree 的节点，来确定变动位置，最终我们会得如图所示的结果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de97c29726fb4b3aa651b2b140d8db59~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),t._v(" "),a("p",[t._v("接下来，咱们具体的看下左序遍历和右序遍历的实现方式。")]),t._v(" "),a("h2",{attrs:{id:"左序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#左序遍历"}},[t._v("#")]),t._v(" 左序遍历")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b9d16241db4148cf9ec13fa7ed6c6b65~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),t._v(" "),a("p",[t._v("咱们的目的是要确定 i 的位置，首先得清楚循环条件，什么时候该退出循环。因为新老节点都是"),a("code",[t._v("数组")]),t._v("，所以 "),a("code",[t._v("i")]),t._v(" 要小于或等于 "),a("code",[t._v("e1(老节点的最后一位)")]),t._v(" 和 "),a("code",[t._v("e2(新节点的最后一位)")]),t._v("，代码如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比较函数 c1 为老的虚拟节点 c2 为新的虚拟节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c 为 children 的简写，e 为 element 的简写")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchKeyedChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" len2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后面多次用到，提取")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义三个指针")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从新的节点开始")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" e1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 老的最后一个 索引值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" e2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" len2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的最后一个 索引值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 移动 i 指针")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" e1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" e2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" n1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" n2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSomeVNodeType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 在循环的比较此节点内的节点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// patch")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 粗略的比较，实际对比要更复杂")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSomeVNodeType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对比节点是否相等 可以通过 type 和 key")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" n2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" n2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br")])]),a("p",[t._v("左序算法，我们主要做了以下几件事：")]),t._v(" "),a("ul",[a("li",[t._v("循环 i ，拿到 c1[i] 和 c2[i]")]),t._v(" "),a("li",[t._v("如果相等，就继续循环比较，对比到头，全都一样的，就 i++，移动指针")]),t._v(" "),a("li",[t._v("如果不相等，就结束比较，停止移动指针")])]),t._v(" "),a("p",[t._v("左边变动的位置确定后，接下来就确定右边变动的位置，这就是任务分解。接下来咱们看下右序遍历是如何实现的呢？")]),t._v(" "),a("h2",{attrs:{id:"右序遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#右序遍历"}},[t._v("#")]),t._v(" 右序遍历")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/638102b21cde4c3a8057b5045cf9df50~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),t._v(" "),a("p",[t._v("咱们从右边开始遍历，那循环条件是什么呢？是不是也只需要 i <= e1 和 i <= e2 就行了呀！i 的位置确定了，临界值无非是 i = e1 或 i = e2 的情况。e1 和 e2 分别是老节点和新节点的最后一个的索引值，实现代码如下：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchKeyedChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" len2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从新的节点开始")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" e1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 老的最后一个 索引值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" e2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" len2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的最后一个 索引值")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 左序遍历")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" e1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" e2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n      i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 右序遍历")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" e1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" e2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" n1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("e1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" n2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("e2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSomeVNodeType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 在循环的比较此节点内的节点")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// patch")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      e1"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      e2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 粗略的比较，实际对比要更复杂")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSomeVNodeType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对比节点是否相等 可以通过 type 和 key")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" n2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" n1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" n2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br")])]),a("p",[t._v("细看代码，右序遍历其实就是拿到老节点和新节点的最后一个值对比，相等的话，e1--、e2-- 往前移动，不相等就停止移动。")]),t._v(" "),a("h2",{attrs:{id:"中间乱序部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中间乱序部分"}},[t._v("#")]),t._v(" 中间乱序部分")]),t._v(" "),a("p",[t._v("经过左序遍历和右序遍历，我们得出了以下的结果，圈出来的就是乱序的部分。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de97c29726fb4b3aa651b2b140d8db59~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),t._v(" "),a("p",[t._v("因为此部分篇幅较长，涉及到最长递增子序列算法，咱们可以移步 => "),a("a",{attrs:{href:"https://juejin.cn/post/7054055241704013831",target:"_blank",rel:"noopener noreferrer"}},[t._v("传送门"),a("OutboundLink")],1),t._v(" 一起讨论。")]),t._v(" "),a("h2",{attrs:{id:"写在最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写在最后"}},[t._v("#")]),t._v(" 写在最后")]),t._v(" "),a("p",[t._v("最后，一图帮你再看一下左序遍历和右序遍历。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f15abebeed714ffc958adee485047941~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),t._v(" "),a("p",[t._v("另外，如果你想学习 Vue3 源码，推荐先入手 "),a("a",{attrs:{href:"https://github.com/cuixiaorui/mini-vue",target:"_blank",rel:"noopener noreferrer"}},[t._v("mini-vue"),a("OutboundLink")],1),t._v("，带你实现 Vue3 最简模型。")])])}),[],!1,null,null,null);s.default=e.exports}}]);