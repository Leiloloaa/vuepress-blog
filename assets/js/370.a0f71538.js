(window.webpackJsonp=window.webpackJsonp||[]).push([[370],{831:function(t,a,s){"use strict";s.r(a);var e=s(35),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"vue3-的更新粒度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue3-的更新粒度"}},[t._v("#")]),t._v(" Vue3 的更新粒度")]),t._v(" "),s("p",[t._v("我们都知道 Vue 对于响应式属性的更新，只会精确更新依赖收集的当前组件，而不会递归的去更新子组件，这也是它性能强大的原因之一。")]),t._v(" "),s("div",{staticClass:"language-vue line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-vue"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      {{ msg }}\n      "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ChildComponent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("我们在触发 this.msg = 'Hello, Changed~'的时候，会触发组件的更新，视图的重新渲染。\n但是 "),s("ChildComponent"),t._v(" 这个组件其实是不会重新渲染的，这是 Vue 刻意而为之的。\n在以前的一段时间里，我曾经认为因为组件是一棵树，所以它的更新就是理所当然的深度遍历这棵树，进行递归更新。本篇就从源码的角度带你一起分析，Vue 是怎么做到精确更新的。")],1),t._v(" "),s("h2",{attrs:{id:"react的更新粒度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react的更新粒度"}},[t._v("#")]),t._v(" React的更新粒度")]),t._v(" "),s("p",[t._v("而 React 在类似的场景下是自顶向下的进行递归更新的，也就是说，React 中假如 ChildComponent 里还有十层嵌套子元素，那么所有层次都会递归的重新render（在不进行手动优化的情况下），这是性能上的灾难。（因此，React 创造了Fiber，创造了异步渲染，其实本质上是弥补被自己搞砸了的性能）。\n他们能用收集依赖的这套体系吗？不能，因为他们遵从Immutable的设计思想，永远不在原对象上修改属性，那么基于 Object.defineProperty 或 Proxy 的响应式依赖收集机制就无从下手了（你永远返回一个新的对象，我哪知道你修改了旧对象的哪部分？）\n同时，由于没有响应式的收集依赖，React 只能递归的把所有子组件都重新 render一遍（除了memo和shouldComponentUpdate这些优化手段），然后再通过 diff算法 决定要更新哪部分的视图，这个递归的过程叫做 reconciler，听起来很酷，但是性能很灾难。")]),t._v(" "),s("h2",{attrs:{id:"vue的更新粒度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue的更新粒度"}},[t._v("#")]),t._v(" Vue的更新粒度")]),t._v(" "),s("p",[t._v("那么，Vue 这种精确的更新是怎么做的呢？其实每个组件都有自己的渲染 watcher，它掌管了当前组件的视图更新，但是并不会掌管 ChildComponent 的更新。")]),t._v(" "),s("p",[t._v("如上例子，如果 msg 的值发生了变化，视图会重新渲染。但是 ChildComponent 不会重新渲染。那么又会产生疑问，如果不会递归的去对子组件更新，如果我们把 msg 作为 prop 传递给子组件，此时应该怎么更新呢？")]),t._v(" "),s("ul",[s("li",[t._v("Vue3 源码中 组件的重新渲染会触发 patch 过程。然后遍历子节点，递归 patch，在遇到组件时会执行 updateComponent 函数，而这个函数中有一个判断是否需要更新，对比 props、slots 等属性是否发生了变化，如果没有变化，那么就是复制到新节点。如果有变化，就执行 instance.update 函数。这就是为什么 Vue 的更新粒度是组件级别的。")])]),t._v(" "),s("h2",{attrs:{id:"vue3-对于-props-的处理-为什么是用shallowreactive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue3-对于-props-的处理-为什么是用shallowreactive"}},[t._v("#")]),t._v(" vue3 对于 props 的处理 为什么是用shallowReactive")]),t._v(" "),s("blockquote",[s("p",[t._v("抛出问题：props 为什么一定要是响应式的值，而不能是一个普通对象。按照更新流程，父组件的传递的 props 发生了变化，就会导致视图的更新，那为什么需要响应式包裹呢？")])]),t._v(" "),s("ul",[s("li",[t._v("Props 是响应式的原因不是为了子组件监听父组件变化重新更新。是因为在 setup 中调用 watchEffect，effect或computed等方法时需要监听响应式对象。如果子组件中使用了 watchEffect 来监听 props 传递的值，那么 props 必须是一个响应式的值。使用 shallowReactive 而不使用 reactive 的原因是 shallowReactive 不会去递归性能更好，并且在 props 的整个更新过程中，只会修改最外层属性。在生产环境还会包裹一层 readOnly，禁止我们在子组件修改 props。因为 Vue 是遵循单向数据流设计。")])])])}),[],!1,null,null,null);a.default=n.exports}}]);