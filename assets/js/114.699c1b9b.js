(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{573:function(v,_,e){"use strict";e.r(_);var t=e(35),s=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"node-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-js"}},[v._v("#")]),v._v(" Node.js")]),v._v(" "),e("h2",{attrs:{id:"说说你对node-js-的理解-优缺点-应用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说你对node-js-的理解-优缺点-应用场景"}},[v._v("#")]),v._v(" 说说你对Node.js 的理解？优缺点？应用场景？")]),v._v(" "),e("p",[v._v("Node.js 是一个服务器端的、非阻塞式 I/O 的、事件驱动的 JavaScript 运行环境。")]),v._v(" "),e("p",[e("strong",[v._v("优点")])]),v._v(" "),e("ul",[e("li",[v._v("处理高并发场景性能更佳")]),v._v(" "),e("li",[v._v("适合 I/O 密集型应用，值的是应用在运行极限时，CPU 占用率仍然比较低，大部分时间是在做 I/O 硬盘内存读写操作")])]),v._v(" "),e("p",[e("strong",[v._v("因为Nodejs是单线程，带来的缺点有")])]),v._v(" "),e("ul",[e("li",[v._v("不适合 CPU 密集型应用")]),v._v(" "),e("li",[v._v("只支持单核 CPU，不能充分利用 CPU")]),v._v(" "),e("li",[v._v("可靠性低，一旦代码某个环节崩溃，整个系统都崩溃")])]),v._v(" "),e("p",[e("strong",[v._v("具体场景可以表现为如下")])]),v._v(" "),e("ul",[e("li",[v._v("第一大类：用户表单收集系统、后台管理系统、实时交互系统、考试系统、联网软件、高并发量的 web 应用程序")]),v._v(" "),e("li",[v._v("第二大类：基于 web、canvas 等多人联网游戏")]),v._v(" "),e("li",[v._v("第三大类：基于 web 的多人实时聊天客户端、聊天室、图文直播")]),v._v(" "),e("li",[v._v("第四大类：单页面浏览器应用程序")]),v._v(" "),e("li",[v._v("第五大类：操作数据库、为前端和移动端提供基于 json 的 API")])]),v._v(" "),e("h2",{attrs:{id:"说说-node-js-有哪些全局对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说-node-js-有哪些全局对象"}},[v._v("#")]),v._v(" 说说 Node. js 有哪些全局对象？")]),v._v(" "),e("p",[v._v("在浏览器 JavaScript 中，通常 window 是全局对象， 而 Nodejs 中的全局对象是 global。")]),v._v(" "),e("p",[e("strong",[v._v("常见的全局对象")])]),v._v(" "),e("ul",[e("li",[v._v("global")]),v._v(" "),e("li",[v._v("clearTimeout、setTimeout")]),v._v(" "),e("li",[v._v("clearInterval、setInterval")]),v._v(" "),e("li",[v._v("Class:Buffer")]),v._v(" "),e("li",[v._v("process")]),v._v(" "),e("li",[v._v("console")])]),v._v(" "),e("h2",{attrs:{id:"说说对-node-中的-fs模块的理解-有哪些常用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说对-node-中的-fs模块的理解-有哪些常用方法"}},[v._v("#")]),v._v(" 说说对 Node 中的 fs模块的理解? 有哪些常用方法")]),v._v(" "),e("p",[v._v("fs（filesystem），该模块提供本地文件的读写能力。")]),v._v(" "),e("p",[e("strong",[v._v("常用的方法")])]),v._v(" "),e("ul",[e("li",[v._v("文件读取\n"),e("ul",[e("li",[v._v("readFile")]),v._v(" "),e("li",[v._v("fs.readFileSync 同步写入")])])]),v._v(" "),e("li",[v._v("文件写入\n"),e("ul",[e("li",[v._v("writeFile")]),v._v(" "),e("li",[v._v("writeFileSync")])])]),v._v(" "),e("li",[v._v("文件追加写入\n"),e("ul",[e("li",[v._v("appendFileSync")])])]),v._v(" "),e("li",[v._v("文件拷贝\n"),e("ul",[e("li",[v._v("copyFileSync")])])]),v._v(" "),e("li",[v._v("创建目录\n"),e("ul",[e("li",[v._v("mkdir")])])])]),v._v(" "),e("blockquote",[e("p",[v._v("有 Sync 就是同步，没有就是异步方法")])]),v._v(" "),e("h2",{attrs:{id:"说说对-nodejs-中的事件循环机制理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说对-nodejs-中的事件循环机制理解"}},[v._v("#")]),v._v(" 说说对 Nodejs 中的事件循环机制理解?")]),v._v(" "),e("p",[v._v("在 NodeJS 中，事件循环是基于 libuv 实现，libuv 是一个多平台的专注于异步 IO 的库")]),v._v(" "),e("blockquote",[e("p",[v._v("重点看 JS 脑图")])]),v._v(" "),e("h2",{attrs:{id:"说说对中间件概念的理解-如何封装-node-中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#说说对中间件概念的理解-如何封装-node-中间件"}},[v._v("#")]),v._v(" 说说对中间件概念的理解，如何封装 node 中间件？")]),v._v(" "),e("p",[v._v("在 NodeJS 中，中间件主要是指封装 http 请求细节处理的方法。例如在 express、koa 等 web 框架中，中间件的本质为一个回调函数，参数包含请求对象、响应对象和执行下一个中间件的函数")]),v._v(" "),e("p",[e("img",{attrs:{src:"https://camo.githubusercontent.com/08f52777011cc53112d7c8455083457a273e3a925327cfbeab5298d532e86858/68747470733a2f2f7374617469632e7675652d6a732e636f6d2f36613665643366302d636365342d313165622d383566362d3666616337376330633962332e706e67",alt:""}})]),v._v(" "),e("p",[v._v("在这些中间件函数中，我们可以执行业务逻辑代码，修改请求和响应对象、返回响应数据等操作。")]),v._v(" "),e("p",[v._v("封装职责单一的中间件，如 token 校验、日志模块等")]),v._v(" "),e("h2",{attrs:{id:"如何实现-jwt-鉴权机制-说说你的思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现-jwt-鉴权机制-说说你的思路"}},[v._v("#")]),v._v(" 如何实现 jwt 鉴权机制？说说你的思路")]),v._v(" "),e("p",[v._v("JWT（JSON Web Token），本质就是一个字符串书写规范，作用是用来在用户和服务器之间传递安全可靠的信息。Token，分成了三部分，头部（Header）、载荷（Payload）、签名（Signature）")]),v._v(" "),e("p",[v._v("Token 的使用分成了两部分：")]),v._v(" "),e("p",[v._v("生成 token：登录成功的时候，颁发token\n验证 token：访问某些资源或者接口时，验证token")]),v._v(" "),e("p",[v._v("生成 token")]),v._v(" "),e("p",[v._v("借助第三方库 jsonwebtoken，通过 jsonwebtoken 的 sign 方法生成一个 token：")]),v._v(" "),e("ul",[e("li",[v._v("第一个参数指的是 Payload")]),v._v(" "),e("li",[v._v("第二个是秘钥，服务端特有")]),v._v(" "),e("li",[v._v("第三个参数是 option，可以定义 token 过期时间")])]),v._v(" "),e("p",[v._v("校验token")]),v._v(" "),e("ul",[e("li",[v._v("使用 koa-jwt 中间件进行验证")])]),v._v(" "),e("h2",{attrs:{id:"npm-的运行机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#npm-的运行机制"}},[v._v("#")]),v._v(" npm 的运行机制")]),v._v(" "),e("ul",[e("li",[v._v("运行 npm run xxx 的时候，npm 会先在当前的目录的 node_modules/.bin 查找要执行的程序，如果找到则运行")]),v._v(" "),e("li",[v._v("没有找到则从全局的 node_modules/.bin 中查找，npm i -g xxx 就是安装到全局目录")]),v._v(" "),e("li",[v._v("如果全局目录还是没找到，那么就从 path 环境变量中查找有没有其他同名的可执行程序")])])])}),[],!1,null,null,null);_.default=s.exports}}]);