(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{522:function(s,n,a){"use strict";a.r(n);var l=a(35),t=Object(l.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[s._v("#")]),s._v(" 二叉树")]),s._v(" "),a("p",[s._v("二叉树是算法题的基础，笔者很多时候注重多练题，但缺乏基础的巩固。要记住九层之台，起于垒土。千里之行，始于足下。")]),s._v(" "),a("p",[a("strong",[s._v("二叉树主要种类")])]),s._v(" "),a("ul",[a("li",[s._v("满二叉树\n"),a("ul",[a("li",[s._v("所有层都是满的，数量2的k次方-1")])])]),s._v(" "),a("li",[s._v("完全二叉树\n"),a("ul",[a("li",[s._v("最底层从左到右都是连续的")])])]),s._v(" "),a("li",[s._v("二叉搜索树\n"),a("ul",[a("li",[s._v("对元素大小有排列关系，根节点的左结点都小于，右节点都大于")]),s._v(" "),a("li",[s._v("时间复杂度 O(n)")]),s._v(" "),a("li",[s._v("查询 logn")])])]),s._v(" "),a("li",[s._v("平衡二叉搜索树\n"),a("ul",[a("li",[s._v("左子树和右子树的高度差的绝对值要小于1")]),s._v(" "),a("li",[s._v("时间复杂度 O(n)")]),s._v(" "),a("li",[s._v("查询 logn")])])])]),s._v(" "),a("p",[a("strong",[s._v("存储方式")])]),s._v(" "),a("ul",[a("li",[s._v("链式存储(主要)\n"),a("ul",[a("li",[s._v("根节点的左指针指向左子树，右指针指向右子树")])])]),s._v(" "),a("li",[s._v("线式存储\n"),a("ul",[a("li",[s._v("排序，生成字符数组")]),s._v(" "),a("li",[s._v("查找：下标i的 左孩子：2xi+1 右孩子：2xi+2")])])])]),s._v(" "),a("p",[a("strong",[s._v("二叉树遍历")])]),s._v(" "),a("ul",[a("li",[s._v("深度优先遍历\n"),a("ul",[a("li",[s._v("递归遍历(栈)")]),s._v(" "),a("li",[s._v("前(中左右)、中(左中右)、后(左右中)序遍历(主要看中的位置)")])])]),s._v(" "),a("li",[s._v("广度优先遍历\n"),a("ul",[a("li",[s._v("层序遍历")])])])]),s._v(" "),a("p",[a("strong",[s._v("二叉树定义--JavaScript版")])]),s._v(" "),a("h2",{attrs:{id:"深度优先递归遍历-三步曲"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深度优先递归遍历-三步曲"}},[s._v("#")]),s._v(" 深度优先递归遍历——三步曲")]),s._v(" "),a("blockquote",[a("p",[s._v("LeetCode 144 145 96")])]),s._v(" "),a("ul",[a("li",[s._v("递归函数的参数(头节点的指针)和返回值")]),s._v(" "),a("li",[s._v("终止条件(遇到空节点就返回)")]),s._v(" "),a("li",[s._v("单层递归的逻辑")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("二叉树\n5\n4 6\n21 \n\n前序遍历：中左右 54216\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"非递归遍历-迭代法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非递归遍历-迭代法"}},[s._v("#")]),s._v(" 非递归遍历——迭代法")]),s._v(" "),a("p",[s._v("理论上所有的递归都可以用栈模拟，有些复杂的就没必要")]),s._v(" "),a("p",[s._v("栈：先进后出")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("二叉树\n5\n4 6\n21 \n\n栈 第一步：\n放入5 弹出5\n栈 第二步：\n放入64 弹出4 \n栈 第三步\n再将12放入 弹出 2 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("ul",[a("li",[s._v("中序遍历比较特殊：访问的元素和处理的元素不一样（首先访问5  但是先处理1）")])])])}),[],!1,null,null,null);n.default=t.exports}}]);