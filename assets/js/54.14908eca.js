(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{514:function(t,n,s){"use strict";s.r(n);var e=s(35),l=Object(e.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"有序数组的平方-l977"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有序数组的平方-l977"}},[t._v("#")]),t._v(" 有序数组的平方-L977")]),t._v(" "),s("p",[t._v("给你一个按 非递减顺序 排序的整数数组 nums， 返回 每个数字的平方 组成的新数组， 要求也按 非递减顺序 排序。")]),t._v(" "),s("p",[t._v("示例 1： 输入： nums = [-4, -1, 0, 3, 10] 输出：[0, 1, 9, 16, 100] 解释： 平方后， 数组变为[16, 1, 0, 9, 100]， 排序后， 数组变为[0, 1, 9, 16, 100]")]),t._v(" "),s("p",[t._v("示例 2： 输入： nums = [-7, -3, 2, 3, 11] 输出：[4, 9, 9, 49, 121]")]),t._v(" "),s("p",[t._v("暴力破解： 通过循环平方， 然后排序 时间复杂度超过了 O(n) 我们需要控制在 O(n)")]),t._v(" "),s("h2",{attrs:{id:"答案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#答案"}},[t._v("#")]),t._v(" 答案")]),t._v(" "),s("p",[t._v("// 给你一个按 非递减顺序 排序的整数数组 nums， 返回 每个数字的平方 组成的新数组， 要求也按 非递减顺序 排序。")]),t._v(" "),s("p",[t._v("// 示例 1： 输入： nums = [-4, -1, 0, 3, 10] 输出：[0, 1, 9, 16, 100] 解释： 平方后， 数组变为[16, 1, 0, 9, 100]， 排序后， 数组变为[0, 1, 9, 16, 100]")]),t._v(" "),s("p",[t._v("// 示例 2： 输入： nums = [-7, -3, 2, 3, 11] 输出：[4, 9, 9, 49, 121]")]),t._v(" "),s("p",[t._v("// 暴力破解： 通过循环平方， 然后排序 时间复杂度超过了 O(n) 我们需要控制在 O(n)")]),t._v(" "),s("p",[t._v("// 双指针的思路，定义一个新数组 result\n// 1、数组本身就是有序的，只是平方之后可能会变大\n// 2、最大值一定是在最右边")]),t._v(" "),s("p",[t._v("function sortedSquares(nums) {\nlet result = [];\nresult.length = nums.length;\nlet left = 0,\nright = nums.length - 1,\ni = nums.length - 1;\nwhile (left <= right) {")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("}\n")])])]),s("p",[t._v("}")])])}),[],!1,null,null,null);n.default=l.exports}}]);