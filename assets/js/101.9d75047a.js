(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{562:function(e,t,a){"use strict";a.r(t);var v=a(35),s=Object(v.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"vite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vite"}},[e._v("#")]),e._v(" Vite")]),e._v(" "),a("blockquote",[a("p",[e._v("在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。生产中利用Rollup作为打包工具，号称下一代的前端构建工具。很多打包器都是基于 javascript 实现的，而 vite 底层是使用 go 实现。go 是多线程语言，相较于单线程有优势。")])]),e._v(" "),a("ul",[a("li",[e._v("Vite 专注于提高开发环境的速度，上线时 Vite 还是使用内置的 rollup 实现文件打包\n"),a("ul",[a("li",[e._v("快速的冷启动: No Bundle + esbuild 预构建")]),e._v(" "),a("li",[e._v("即时的模块热更新: 基于ESM的HMR，同时利用浏览器缓存策略提升速度")])])]),e._v(" "),a("li",[e._v("Vite 使用了 esbuild 来处理 javascript 文件，这也是 Vite 速度快的主要原因之一")]),e._v(" "),a("li",[e._v("Vite 基于浏览器自己的 module import 功能，可以做到首页文件按需节加载")]),e._v(" "),a("li",[e._v("针对文件过多的库，Vite 内置了预打包的功能避免过多的 http 请求")])]),e._v(" "),a("h2",{attrs:{id:"为什么生产环境仍需打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么生产环境仍需打包"}},[e._v("#")]),e._v(" 为什么生产环境仍需打包")]),e._v(" "),a("p",[e._v("尽管原生 ESM 现在得到了广泛支持，但由于嵌套导入会导致额外的网络往返，在生产环境中发布未打包的 ESM 仍然效率低下（即使使用 HTTP/2）。为了在生产环境中获得最佳的加载性能，最好还是将代码进行 tree-shaking、懒加载和 chunk 分割（以获得更好的缓存）。")]),e._v(" "),a("p",[e._v("要确保开发服务器和生产环境构建之间的最优输出和行为一致并不容易。")]),e._v(" "),a("h2",{attrs:{id:"为何不用-esbuild-打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为何不用-esbuild-打包"}},[e._v("#")]),e._v(" 为何不用 ESBuild 打包？")]),e._v(" "),a("p",[e._v("虽然 esbuild 快得惊人，并且已经是一个在构建库方面比较出色的工具，但一些针对构建 应用 的重要功能仍然还在持续开发中 —— 特别是代码分割和 CSS 处理方面。就目前来说，Rollup 在应用打包方面更加成熟和灵活。尽管如此，当未来这些功能稳定后，我们也不排除使用 esbuild 作为生产构建器的可能。")]),e._v(" "),a("h2",{attrs:{id:"对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对比"}},[e._v("#")]),e._v(" 对比")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-142da4a79cf9589a2a0dc8bbe6c12c6d_1440w.jpg",alt:""}})]),e._v(" "),a("h3",{attrs:{id:"vs-webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vs-webpack"}},[e._v("#")]),e._v(" vs Webpack")]),e._v(" "),a("p",[e._v("Webpack 是近年来使用量最大，同时社区最完善的前端打包构建工具，新出的5.x版本对构建细节进行了优化，在部分场景下打包速度提升明显。"),a("code",[e._v("Webpack 在启动时，会先构建项目模块的依赖图，如果在项目中的某个地方改动了代码，Webpack 则会对相关的依赖重新打包")]),e._v("，随着项目的增大，其打包速度也会下降。")]),e._v(" "),a("p",[e._v("Vite 相比于 Webpack 而言，没有打包的过程，而是直接启动了一个开发服务器 devServer。"),a("code",[e._v("Vite 劫持浏览器的 HTTP 请求，在后端进行相应的处理将项目中使用的文件通过简单的分解与整合，然后再返回给浏览器(整个过程没有对文件进行打包编译)")]),e._v("，所以编译速度很快。")]),e._v(" "),a("h3",{attrs:{id:"vs-snowpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vs-snowpack"}},[e._v("#")]),e._v(" vs Snowpack")]),e._v(" "),a("p",[e._v("Snowpack 首次提出利用浏览器原生 ESM 能力的打包工具，其理念就是减少或避免整个 bundle 的打包。默认在 dev 和 production 环境都使用 unbundle 的方式来部署应用。但是它的构建时却是交给用户自己选择，整体的打包体验显得有点支离破碎。")]),e._v(" "),a("p",[e._v("而 Vite 直接整合了 Rollup，为用户提供了完善、开箱即用的解决方案，并且由于这些集成，也方便扩展更多的高级功能。")]),e._v(" "),a("p",[e._v("两者较大的区别是在需要 bundle 打包的时候 Vite 使用 Rollup 内置配置，而 Snowpack 通过其他插件将其委托给 "),a("code",[e._v("Parcel/``webpack")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"前置知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[e._v("#")]),e._v(" 前置知识")]),e._v(" "),a("h3",{attrs:{id:"esm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#esm"}},[e._v("#")]),e._v(" ESM")]),e._v(" "),a("p",[e._v("ESM 是 JavaScript 提出的官方标准化模块系统，不同于之前的 CJS，AMD，CMD 等等，ESM 提供了更原生以及更动态的模块加载方案，最重要的就是它是"),a("code",[e._v("浏览器原生支持")]),e._v("的，也就是说我们可以直接在浏览器中去执行 import，"),a("code",[e._v("动态")]),e._v("引入我们需要的模块，而不是"),a("code",[e._v("把所有模块打包在一起")]),e._v("。")]),e._v(" "),a("p",[e._v("当我们在使用模块开发时，其实就是在构建一张模块依赖关系图，当模块加载时，就会从入口文件开始，最终生成完整的模块实例图。")]),e._v(" "),a("p",[e._v("ESM的执行可以分为三个步骤：")]),e._v(" "),a("ul",[a("li",[e._v("构建: 确定从哪里下载该模块文件、下载并将所有的文件解析为模块记录")]),e._v(" "),a("li",[e._v("实例化: 将模块记录转换为一个模块实例，为所有的模块分配内存空间，依照导出、导入语句把模块指向对应的内存地址。")]),e._v(" "),a("li",[e._v("运行：运行代码，将内存空间填充")])]),e._v(" "),a("p",[e._v("从上面实例化的过程可以看出，"),a("code",[e._v("ESM")]),e._v("使用实时绑定的模式，"),a("code",[e._v("导出和导入的模块都指向相同的内存地址")]),e._v("，也就是值引用。而 "),a("code",[e._v("CJS")]),e._v("采用的是"),a("code",[e._v("值拷贝")]),e._v("，即所有导出值都是拷贝值。")]),e._v(" "),a("h3",{attrs:{id:"esbuild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#esbuild"}},[e._v("#")]),e._v(" esBuild")]),e._v(" "),a("p",[e._v("Vite 底层使用 esBuild 实现对."),a("code",[e._v("ts、jsx、js")]),e._v("代码文件的转化，所以先看下什么是 es-build。")]),e._v(" "),a("p",[e._v("esBuild 是一个 "),a("code",[e._v("JavaScript Bundler")]),e._v(" 打包和压缩工具，它提供了与 Webpack、Rollup 等工具相似的资源打包能力。可以将 JavaScript 和 TypeScript 代码打包分发在网页上运行。但其打包速度却是其他工具的"),a("code",[e._v("10～100倍")]),e._v("。")]),e._v(" "),a("p",[e._v("目前他支持以下的功能：")]),e._v(" "),a("ul",[a("li",[e._v("加载器")]),e._v(" "),a("li",[e._v("压缩")]),e._v(" "),a("li",[e._v("打包\n"),a("ul",[a("li",[e._v("Tree shaking")]),e._v(" "),a("li",[e._v("Source map生成")])])])]),e._v(" "),a("p",[e._v("esBuild 总共提供了四个函数："),a("code",[e._v("transform、build、buildSync、Service")]),e._v("。"),a("a",{attrs:{href:"https://esbuild.github.io/api/",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),a("OutboundLink")],1)]),e._v(" "),a("h3",{attrs:{id:"rollup"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rollup"}},[e._v("#")]),e._v(" Rollup")]),e._v(" "),a("p",[e._v("在生产环境下，Vite 使用 Rollup 来进行打包")]),e._v(" "),a("p",[e._v("Rollup 是"),a("code",[e._v("基于 ESM 的 JavaScript 打包工具")]),e._v("。相比于其他打包工具如 Webpack，他总是能打出更小、更快的包。因为 Rollup 基于 ESM 模块，比 Webpack 和 Browserify 使用的 CommonJS 模块机制更高效。Rollup 的亮点在于同一个地方，一次性加载。能针对源码进行 "),a("code",[e._v("Tree Shaking")]),e._v("(去除那些已被定义但没被使用的代码)，以及 Scope Hoisting 以减小输出文件大小提升运行性能。")]),e._v(" "),a("p",[e._v("Rollup 分为 "),a("code",[e._v("build（构建）阶段")]),e._v(" 和 "),a("code",[e._v("output generate（输出生成）阶段")]),e._v("。主要过程如下：")]),e._v(" "),a("ul",[a("li",[e._v("获取入口文件的内容，包装成 module，生成抽象语法树")]),e._v(" "),a("li",[e._v("对入口文件抽象语法树进行依赖解析")]),e._v(" "),a("li",[e._v("生成最终代码")]),e._v(" "),a("li",[e._v("写入目标文件")])]),e._v(" "),a("p",[e._v("如果你的项目（特别是类库）只有JavaScript，而没有其他的静态资源文件，使用 Webpack 就有点大才小用了。因为 Webpack 打包的文件的体积略大，运行略慢，可读性略低。这时候 Rollup 也不失为一个好选择。")]),e._v(" "),a("blockquote",[a("p",[e._v("框架库一般都会使用 rollup 进行打包，大多数情况都只有 js，没有其它的文件需要转译")])]),e._v(" "),a("h2",{attrs:{id:"核心原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心原理"}},[e._v("#")]),e._v(" 核心原理")]),e._v(" "),a("p",[e._v("1、当声明一个 script标签类型为 module 时,如")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("script type"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"module"')]),e._v(" src"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/src/main.js"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("2、当浏览器解析资源时，会往当前域名发起一个GET请求main.js文件")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// main.js")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" createApp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'vue'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" App "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'./App.vue'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("createApp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("App"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'#app'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("3、请求到了 "),a("code",[e._v("main.js")]),e._v(" 文件，会检测到内部含有 import 引入的包，import 引用发起 HTTP 请求获取模块的内容文件，如 App.vue、vue 文件")]),e._v(" "),a("p",[e._v("Vite 其"),a("strong",[e._v("核心原理")]),e._v("是"),a("code",[e._v("利用浏览器现在已经支持 ES6 的 import")]),e._v("，碰见 import 就会发送一个 HTTP 请求去加载文件，Vite 启动一个 koa 服务器拦截这些请求，并在后端进行相应的处理将项目中使用的文件通过简单的分解与整合，然后再以 ESM 格式返回返回给浏览器。Vite 整个过程中没有对文件进行打包编译，做到了真正的按需加载，所以其运行速度比原始的 webpack "),a("strong",[e._v("开发编译")]),e._v("速度快出许多！")]),e._v(" "),a("h3",{attrs:{id:"基于-esm-的-dev-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-esm-的-dev-server"}},[e._v("#")]),e._v(" 基于 ESM 的 Dev server")]),e._v(" "),a("p",[e._v("在 Vite 出来之前，传统的打包工具如 Webpack 是"),a("code",[e._v("先解析依赖、打包构建再启动开发服务器")]),e._v("，Dev Server 必须等待所有模块构建完成，当我们修改了 bundle 模块中的一个子模块， 整个 bundle 文件都会重新打包然后输出。项目应用越大，启动时间越长。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-7c1e11500968d9af15dcd3ba85ca73ed_1440w.jpg",alt:""}})]),e._v(" "),a("p",[e._v("而 Vite 利用浏览器对ESM的支持，当 import 模块时，浏览器就会下载被导入的模块。先启动开发服务器，当代码执行到模块加载时再请求对应模块的文件，本质上实现了动态加载。灰色部分是暂时没有用到的路由，所有这部分不会参与构建过程。随着项目里的应用越来越多，增加 route，也不会影响其构建速度。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-7ddc4a82ccb5bce039888e551f00d714_1440w.jpg",alt:""}})]),e._v(" "),a("h3",{attrs:{id:"基于-esm-的-hmr-热更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-esm-的-hmr-热更新"}},[e._v("#")]),e._v(" 基于 ESM 的 HMR 热更新")]),e._v(" "),a("p",[e._v("目前所有的打包工具实现热更新的思路都大同小异："),a("code",[e._v("主要是通过 WebSocket 创建浏览器和服务器的通信监听文件的改变")]),e._v("，当文件被修改时，服务端发送消息通知客户端修改相应的代码，客户端对应不同的文件进行不同的操作的更新。")]),e._v(" "),a("h4",{attrs:{id:"vs-webpack-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vs-webpack-2"}},[e._v("#")]),e._v(" VS Webpack")]),e._v(" "),a("ul",[a("li",[e._v("Webpack: 重新编译，请求变更后模块的代码，客户端重新加载")]),e._v(" "),a("li",[e._v("Vite: 请求变更的模块，再重新加载")])]),e._v(" "),a("p",[e._v("Vite 通过 chokidar 来监听文件系统的变更，只用对发生变更的模块重新加载，"),a("code",[e._v("只需要精确的使相关模块与其临近的 HMR 边界连接失效即可")]),e._v("，这样 HMR 更新速度就不会因为应用体积的增加而变慢而 Webpack 还要经历一次打包构建。所以 HMR 场景下，Vite 表现也要好于 Webpack。")]),e._v(" "),a("h4",{attrs:{id:"核心流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心流程"}},[e._v("#")]),e._v(" 核心流程")]),e._v(" "),a("p",[e._v("Vite 整个热更新过程可以分成"),a("code",[e._v("四步")])]),e._v(" "),a("ul",[a("li",[e._v("创建一个websocket服务端和client文件，启动服务")]),e._v(" "),a("li",[e._v("通过chokidar监听文件变更")]),e._v(" "),a("li",[e._v("当代码变更后，服务端进行判断并推送到客户端")]),e._v(" "),a("li",[e._v("客户端根据推送的信息执行不同操作的更新")])]),e._v(" "),a("p",[e._v("整体流程图：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-15f866ed1aa4e55249804d531c2f08b9_1440w.jpg",alt:""}})]),e._v(" "),a("p",[e._v("之后就是一些源码解读，就不沾了，直接去 "),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/467325485",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门"),a("OutboundLink")],1),e._v(" 看看吧")]),e._v(" "),a("h2",{attrs:{id:"基于-esbuild-的依赖预编译优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-esbuild-的依赖预编译优化"}},[e._v("#")]),e._v(" 基于 esbuild 的依赖预编译优化")]),e._v(" "),a("h3",{attrs:{id:"为什么需要预构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要预构建"}},[e._v("#")]),e._v(" 为什么需要预构建？")]),e._v(" "),a("ul",[a("li",[e._v("支持 commonJS 依赖")]),e._v(" "),a("li",[e._v("上面提到 Vite 是基于浏览器原生支持 ESM 的能力实现的，但要求用户的代码模块必须是 ESM 模块，因此必须将 commonJS 的文件提前处理，转化成 ESM 模块并缓存入 node_modules/.vite\n减少模块和请求数量")]),e._v(" "),a("li",[e._v("除此之外，我们常用的 lodash 工具库，里面有很多包通过单独的文件相互导入，而 lodash-es 这种包会有几百个子模块，当代码中出现 import { debounce } from 'lodash-es' 会发出几百个 HTTP 请求，这些请求会造成网络堵塞，影响页面的加载。")])]),e._v(" "),a("p",[e._v("Vite 将有许多内部模块的 ESM 依赖关系转换为单个模块，以提高后续页面加载性能。")]),e._v(" "),a("p",[e._v("通过预构建 lodash-es 成为一个模块，也就只需要一个 HTTP 请求了！")]),e._v(" "),a("h3",{attrs:{id:"为什么使用-esbuild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用-esbuild"}},[e._v("#")]),e._v(" 为什么使用 esbuild?")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-fc746af50f877e186b8b791d5969593f_1440w.jpg",alt:""}})]),e._v(" "),a("p",[e._v("引用尤大的一句话：“快”就一个字")]),e._v(" "),a("p",[e._v("这是 esbuild 首页的图。新一代的打包工具，提供了与 Webpack、Rollup、Parcel 等工具相似的资源打包能力，但在时速上达到10～100倍的差距，耗时是 Webpack2%~3%")]),e._v(" "),a("ul",[a("li",[e._v("编译运行 VS 解释运行")])]),e._v(" "),a("p",[e._v("大多数前端打包工具都是基于 JavaScript 实现的，大家都知道 JavaScript 是解释型语言，边运行边解释。而 Esbuild 则选择使用 Go 语言编写，该语言可以编译为原生代码，在编译的时候都将语言转为机器语言，在启动的时候直接执行即可，在 CPU 密集场景下，Go 更具性能优势。")]),e._v(" "),a("ul",[a("li",[e._v("多线程 VS 单线程")])]),e._v(" "),a("p",[e._v("JavaScript 本质上是一门单线程语言，直到引入 WebWorker 之后才有可能在浏览器、Node 中实现多线程操作。就我对 Webpack 的源码理解，其源码也并未使用 WebWorker 提供的多线程能力。而 GO 天生的多线程优势。")]),e._v(" "),a("ul",[a("li",[e._v("对构建流程进行了优化，充分利用 CPU 资源")])]),e._v(" "),a("h3",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[e._v("#")]),e._v(" 实现原理？")]),e._v(" "),a("p",[e._v("Vite 预编译之后，将文件缓存在 "),a("code",[e._v("node_modules/.vite/")]),e._v(" 文件夹下。根据以下地方来决定是否需要重新执行预构建。")]),e._v(" "),a("p",[e._v("package.json 中：dependencies 发生变化")]),e._v(" "),a("ul",[a("li",[e._v("包管理器的 lockfile")]),e._v(" "),a("li",[e._v("如果想强制让 Vite 重新预构建依赖，可以使用 "),a("code",[e._v("--force")]),e._v(" 启动开发服务器，或者直接删掉 node_modules/.vite/ 文件夹。")])]),e._v(" "),a("h4",{attrs:{id:"整体的流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整体的流程图"}},[e._v("#")]),e._v(" 整体的流程图")]),e._v(" "),a("p",[e._v("核心代码都在packages/"),a("code",[e._v("vite")]),e._v("/"),a("code",[e._v("src")]),e._v("/"),a("code",[e._v("node")]),e._v("/optimizer/index.ts里面")]),e._v(" "),a("p",[e._v("自动搜寻依赖主要模块：esbuildScanPlugin\n预构建编译主要模块：esbuildDepPlugin")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-e54f0ddf447ea726fc80a27c827bd4d7_1440w.jpg",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("最后总结下 Vite 相关的优缺点：")]),e._v(" "),a("p",[a("strong",[e._v("优点")])]),e._v(" "),a("ul",[a("li",[e._v("快速的冷启动: 采用 No Bundle 和 esbuild 预构建，速度远快于 Webpack")]),e._v(" "),a("li",[e._v("高效的热更新：基于 ESM 实现，同时利用 HTTP 头来加速整个页面的重新加载，增加缓存策略")]),e._v(" "),a("li",[e._v("真正的按需加载: 基于浏览器 ESM 的支持，实现真正的按需加载")])]),e._v(" "),a("p",[a("strong",[e._v("缺点")])]),e._v(" "),a("ul",[a("li",[e._v("生态：目前 Vite 的生态不如 Webapck，不过我觉得生态也只是时间上的问题。")]),e._v(" "),a("li",[e._v("生产环境由于 esbuild 对 css 和代码分割不友好使用 Rollup 进行打包")])]),e._v(" "),a("p",[e._v("Vite 虽然才在构建打包场景兴起，但在很多场景下基本都会优于现有的解决方案。如果有生态、想要丰富的 loader、plugins 的要求可以考虑成熟的 Webpack。在其余情况下，Vite 不失为一个打包构建工具的好选择。")])])}),[],!1,null,null,null);t.default=s.exports}}]);