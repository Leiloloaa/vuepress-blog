(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{552:function(e,t,a){"use strict";a.r(t);var s=a(35),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"vue-基础题b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-基础题b"}},[e._v("#")]),e._v(" Vue 基础题b")]),e._v(" "),a("p",[e._v("在暗淡无光的日子里，要更加努力呀！才能越早迎来光明！\n")]),e._v(" "),a("h2",{attrs:{id:"vue2-x-各个生命周期做了哪些事情"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue2-x-各个生命周期做了哪些事情"}},[e._v("#")]),e._v(" Vue2.X 各个生命周期做了哪些事情？")]),e._v(" "),a("ul",[a("li",[e._v("BeforeCreate 实例化 但是未初始化 data")]),e._v(" "),a("li",[e._v("Created 已初始化响应式数据")]),e._v(" "),a("li",[e._v("BeforeMount render 调用 vdom 生成")]),e._v(" "),a("li",[e._v("Mounted 真实 dom 挂载完成")]),e._v(" "),a("li",[e._v("BeforeUpdate 数据更新 新的 vdom 生成")]),e._v(" "),a("li",[e._v("Updated 新旧 vdom 进行对比 真实的 dom")]),e._v(" "),a("li",[e._v("BeforeDestroy 实例销毁前 还可访问数据")]),e._v(" "),a("li",[e._v("Destroyed 实例销毁 子实例销毁 指令解绑")])]),e._v(" "),a("blockquote",[a("p",[e._v("Vue3 将 beforeCreate 和 created 合并在了 setup 里面，其它的加上了 on 前缀，修改了 beforeDestroy 和 destroyed，变为 onBeforeUnmount 和 unmounted。")])]),e._v(" "),a("h2",{attrs:{id:"vue-3-x-需要-react-的-fiber-吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-3-x-需要-react-的-fiber-吗"}},[e._v("#")]),e._v(" Vue 3.X 需要 React 的 Fiber 吗?")]),e._v(" "),a("blockquote",[a("p",[e._v("vue 的 diff 被限制在组件级，这样每次变化影响的只是一颗子树，相对范围较小。所以 fiber 带来的收益似乎也会降低，fiber 要改架构还可能破坏目前稳定的表现。因此不需要。")])]),e._v(" "),a("p",[e._v("虚拟 Dom 控制在组件级，最早 Vue3 的提案其实是包含时间切片方案的，最后废弃的主要原因，是时间切片解决的的问题，Vue3 基本碰不到")]),e._v(" "),a("ol",[a("li",[e._v("Vue3 把虚拟 Dom 控制在组件级别，组件之间使用响应式，这就让 Vue3 的虚拟 Dom 不会过于庞大")]),e._v(" "),a("li",[e._v("Vue3 虚拟 Dom 的静态标记和自动缓存功能，让静态的节点和属性可以直接绕过 Diff 逻辑，也大大减少了虚拟 Dom 的 Diff 事件")]),e._v(" "),a("li",[e._v("时间切片也会带来额外的系统复杂性")])]),e._v(" "),a("p",[e._v("所以引入时间切片对于 Vue3 来说投入产出比不太理想，在后来的讨论中，Vue3 的时间切片方案就被废弃了")]),e._v(" "),a("h2",{attrs:{id:"页面状态保存-持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面状态保存-持久化"}},[e._v("#")]),e._v(" 页面状态保存？持久化？")]),e._v(" "),a("ul",[a("li",[e._v("客户端持久化\n"),a("ul",[a("li",[e._v("localStorage sessionStorage web sql cookie indexedDB")]),e._v(" "),a("li",[e._v("vuex 再同步 localStorage")])])]),e._v(" "),a("li",[e._v("服务端持久化\n"),a("ul",[a("li",[e._v("提供接口 客户端提交数据请求")])])])]),e._v(" "),a("h2",{attrs:{id:"vue-2-x-中是如何检测数组的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-2-x-中是如何检测数组的"}},[e._v("#")]),e._v(" Vue 2.X 中是如何检测数组的？")]),e._v(" "),a("ul",[a("li",[e._v("Vue 2.X 中是如何检测数组的？\n"),a("ul",[a("li",[e._v("使用 vm.$set，另外 Vue 2.X 重写了数组方法")])])]),e._v(" "),a("li",[e._v("你可以介绍一下，为什么 Vue 数据改变页面也会同步更新么？\n"),a("ul",[a("li",[e._v("因为 Vue 具有非侵入性的响应式系统的特性")]),e._v(" "),a("li",[e._v("在 Vue 中当我们修改变量时，视图就会实时进行更新，这可以让状态管理变得非常简单直接，我们工作中也时时刻刻可以体会到数据绑定和响应式带来的研发效率提升")])])]),e._v(" "),a("li",[e._v("你可以具体聊聊 Vue 是如何追踪数据发生变化的么？\n"),a("blockquote",[a("p",[e._v("在 Vue 中当我们把一个普通的 JS 对象作为 data 传入 Vue 实例，Vue2.x 对这个数据初始化时将遍历这个对象所有的属性，并使用 JS 的原生特性 Object.defineProperty 把这些属性全部转为 getter\\setter。这些 getter\\setter 对用户来说是不可见的，他们可以在属性被访问和修改时通知变更。同时每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据属性记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染")])])]),e._v(" "),a("li",[e._v("那为什么有些数组的数据变更不能被 Vue 监测到？\n"),a("ul",[a("li",[e._v("我们操作数组的一些动作 arr[2] = 'xxx' / arr.length = 2 或者是调用 Array.prototype 上挂载的部分方法并不能触发这个属性的 setter")])])]),e._v(" "),a("li",[e._v("你刚才提供的方法里，splice 方法也可以触发状态更新，这个原因是什么呢？\n"),a("ul",[a("li",[e._v("因为 Vue2.x 将数组的 7 个常用方法 push、pop、shift、unshift、splice、sort、reverse 进行了重写，所以通过调用包装之后的数组方法就能够被 Vue 监测到")])])]),e._v(" "),a("li",[e._v("Vue2.x 是通过 Object.defineProperty 来实现数据变化的监测，那 Vue2.x 监测数组变更的两条限制：不能监听利用索引直接设置一个数组项，不能监听直接修改数组的长度，是因为 defineProperty 的限制么？\n"),a("ul",[a("li",[e._v("Object.defineProperty 对于数组变化监听的表现与 Vue2.x 还是有不同的，比如 Object.defineProperty 可以监听到通过索引直接修改数组项，当然也不是说 Object.defineProperty 可以完全监听数组的变化，像直接修改数组的长度或者 push\\pop 之类的方法还是不能触发 setter 的。")])])]),e._v(" "),a("li",[e._v("为什么 Object.defineProperty 明明能监听到数组值的变化，而 Vue 却没有实现呢？\n"),a("ul",[a("li",[e._v("因为 Vue 是对数组元素进行了监听，而没有对数组本身的变化进行监听")])])]),e._v(" "),a("li",[e._v("为什么不是用 Object.defineProperty 去监听数组中已存在的元素变化呢？\n"),a("ul",[a("li",[e._v("这其实是出于性能原因的考量，给每一个数组元素绑定上监听，实际消耗很大而受益并不大。")])])])]),e._v(" "),a("h2",{attrs:{id:"vue-获取数据在哪个周期函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-获取数据在哪个周期函数"}},[e._v("#")]),e._v(" vue 获取数据在哪个周期函数")]),e._v(" "),a("p",[e._v("看实际情况，一般在 created（或beforeRouter）里面就可以，如果涉及到需要页面加载完成之后的话就用 mounted。在created的时候，视图中的html并没有渲染出来，所以此时如果直接去操作html的dom节点，一定找不到相关的元素。而在mounted中，由于此时html已经渲染出来了，所以可以直接操作dom节点，（此时document.getElementById 即可生效了）。")]),e._v(" "),a("h2",{attrs:{id:"第一次页面加载会触发哪几个钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一次页面加载会触发哪几个钩子"}},[e._v("#")]),e._v(" 第一次页面加载会触发哪几个钩子？")]),e._v(" "),a("p",[e._v("第一次页面加载时会触发 beforeCreate, created, beforeMount, mounted 这几个钩子")]),e._v(" "),a("h2",{attrs:{id:"dom渲染在-哪个周期中就已经完成了"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom渲染在-哪个周期中就已经完成了"}},[e._v("#")]),e._v(" DOM渲染在 哪个周期中就已经完成了？")]),e._v(" "),a("p",[e._v("DOM渲染在mounted中就已经完成了")]),e._v(" "),a("h2",{attrs:{id:"嵌套组件的生命周期的执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套组件的生命周期的执行顺序"}},[e._v("#")]),e._v(" 嵌套组件的生命周期的执行顺序")]),e._v(" "),a("p",[e._v("vm.beforeCreate ——> vm.created ——> vm.beforeMount ——> son.beforeCreate ——> son.created ——> son.beforeMount ——> son.mounted ——> vm.mounted")]),e._v(" "),a("h2",{attrs:{id:"更改组件数据-修改子组件的数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更改组件数据-修改子组件的数据"}},[e._v("#")]),e._v(" 更改组件数据，修改子组件的数据")]),e._v(" "),a("p",[e._v("vm.beforeCreate ——> vm.created ——> vm.beforeMount ——> son.beforeCreate ——> son.created ——> son.beforeMount ——> son.mounted ——> vm.mounted ——> son.beforeUpdate ——> son.updated\nwatch能监听computed的属性吗")]),e._v(" "),a("h2",{attrs:{id:"router-和-route"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#router-和-route"}},[e._v("#")]),e._v(" router 和 route？")]),e._v(" "),a("ul",[a("li",[e._v("router 是 VueRouter 的实例对象，全局的")]),e._v(" "),a("li",[e._v("route 则是跳转路由对象，局部的")])]),e._v(" "),a("h2",{attrs:{id:"路由懒加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路由懒加载"}},[e._v("#")]),e._v(" 路由懒加载？")]),e._v(" "),a("p",[e._v("在路由定义时")]),e._v(" "),a("ul",[a("li",[e._v("使用 import\n"),a("ul",[a("li",[e._v("() =>  import(...)")])])]),e._v(" "),a("li",[e._v("使用 require\n"),a("ul",[a("li",[e._v("resolve => (require([...],resolve))")])])]),e._v(" "),a("li",[e._v("使用 webpack 分块\n"),a("ul",[a("li",[e._v("使用 webpackChunkName")])])])]),e._v(" "),a("h2",{attrs:{id:"图片懒加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图片懒加载"}},[e._v("#")]),e._v(" 图片懒加载")]),e._v(" "),a("p",[e._v("使用 Vue-lazyload img 的 src 先指向空白图，然后当 js 监听到可视窗口后，赋值 data-src 真正的图赋值给 src 达到懒加载的效果，可以配置 preload 来确定下滑的位置。")]),e._v(" "),a("h2",{attrs:{id:"什么是-vue-nexttick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-vue-nexttick"}},[e._v("#")]),e._v(" 什么是 Vue.nextTick()")]),e._v(" "),a("p",[e._v("是Vue的核心方法之一，官方文档解释如下：")]),e._v(" "),a("p",[e._v("在下次DOM更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM。")]),e._v(" "),a("h2",{attrs:{id:"vuex-为什么同时设计-mutation-和-action-只设计一个行不行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vuex-为什么同时设计-mutation-和-action-只设计一个行不行"}},[e._v("#")]),e._v(" vuex 为什么同时设计 mutation 和 action？只设计一个行不行？")]),e._v(" "),a("ul",[a("li",[e._v("mutation 必须是同步函数")]),e._v(" "),a("li",[e._v("Action 可以包含任意异步操作")]),e._v(" "),a("li",[e._v("Action 提交的是 mutation，而不是直接变更状态")])]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" store "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Vuex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Store")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  state"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    count"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  mutations"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("increment")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("state")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("count"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  actions"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("increment")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("commit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'increment'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br")])]),a("h2",{attrs:{id:"vue模板-template-里为什么不能使用多个头结点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue模板-template-里为什么不能使用多个头结点"}},[e._v("#")]),e._v(" vue模板（template）里为什么不能使用多个头结点？")]),e._v(" "),a("ul",[a("li",[e._v("Vue2.x 中必须要有一个根节点，createApp 需传入")]),e._v(" "),a("li",[e._v("Vue3.x 中实现了 Fragment，可以不用根节点")])]),e._v(" "),a("h2",{attrs:{id:"keep-alive-的原理-使用有什么问题-如何解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive-的原理-使用有什么问题-如何解决"}},[e._v("#")]),e._v(" keep-alive 的原理，使用有什么问题？如何解决")]),e._v(" "),a("p",[e._v("keep-alive 是 vue 中内置的一个组件，用来缓存组件。")]),e._v(" "),a("h2",{attrs:{id:"vue-和-react-服务端渲染所用的框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-和-react-服务端渲染所用的框架"}},[e._v("#")]),e._v(" Vue 和 React 服务端渲染所用的框架")]),e._v(" "),a("ul",[a("li",[e._v("Vue => Nuxt.js")]),e._v(" "),a("li",[e._v("react => Next.js")])]),e._v(" "),a("h2",{attrs:{id:"为什么需要服务端渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要服务端渲染"}},[e._v("#")]),e._v(" 为什么需要服务端渲染")]),e._v(" "),a("ul",[a("li",[e._v("利于 SEO 搜索引擎\n"),a("ul",[a("li",[e._v("官网")])])]),e._v(" "),a("li",[e._v("首屏加载速度快")])]),e._v(" "),a("h2",{attrs:{id:"服务端渲染和客户端渲染有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端渲染和客户端渲染有什么区别"}},[e._v("#")]),e._v(" 服务端渲染和客户端渲染有什么区别")]),e._v(" "),a("p",[a("strong",[e._v("区别")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("客户端渲染过程")])]),e._v(" "),a("li",[a("p",[e._v("访问客户端渲染的网站。")])]),e._v(" "),a("li",[a("p",[e._v("服务器返回一个包含了引入资源语句和 ")]),a("div",{attrs:{id:"app"}}),e._v(" 的 HTML 文件。"),a("p")]),e._v(" "),a("li",[a("p",[e._v("客户端通过 HTTP 向服务器请求资源，当必要的资源都加载完毕后，执行 new Vue() 开始实例化并渲染页面。")])]),e._v(" "),a("li",[a("p",[e._v("服务端渲染过程")])]),e._v(" "),a("li",[a("p",[e._v("访问服务端渲染的网站。")])]),e._v(" "),a("li",[a("p",[e._v("服务器会查看当前路由组件需要哪些资源文件，然后将这些文件的内容填充到 HTML 文件。如果有 asyncData() 函数，就会执行它进行数据预取并填充到 HTML 文件里，最后返回这个 HTML 页面。")])]),e._v(" "),a("li",[a("p",[e._v("当客户端接收到这个 HTML 页面时，可以马上就开始渲染页面。与此同时，页面也会加载资源，当必要的资源都加载完毕后，开始执行 new Vue() 开始实例化并接管页面。")])])]),e._v(" "),a("p",[a("strong",[e._v("服务端渲染的优势")])]),e._v(" "),a("p",[e._v("不管是客户端渲染还是服务端渲染，都需要等待客户端执行 new Vue() 之后，用户才能进行交互操作。但服务端渲染的网站能让用户更快的看见页面")]),e._v(" "),a("h2",{attrs:{id:"vue-生命周期的改变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-生命周期的改变"}},[e._v("#")]),e._v(" Vue 生命周期的改变")]),e._v(" "),a("p",[e._v("本来 Vue 在生命周期 created、beforeMount 或者 mounted 中都可以调用异步，但是为了与服务端渲染相同，所以选在 created 中。因为 服务端没有 beforeMount 和 mounted 生命钩子函数")]),e._v(" "),a("h2",{attrs:{id:"vue-应用的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-应用的特性"}},[e._v("#")]),e._v(" Vue 应用的特性")]),e._v(" "),a("p",[e._v("客户端和服务端都创建了 vue 应用程序，并都用 webpack 进行打包，生成了 server bundle 和 client bundle。server bundle 用于服务器渲染，client bundle 是一个客户端的静态标记，服务器渲染好 html 页面片段后，会发送给客户端，然后混合客户端静态标记，这样应用就具有 vue 应用的特性。")]),e._v(" "),a("p",[e._v("服务端渲染需要注意是：")]),e._v(" "),a("ul",[a("li",[e._v("只可以调用 beforeCreate 和 created 两个钩子函数，其它的只会在客户端执行。")]),e._v(" "),a("li",[e._v("如果你在 created 中使用了 setInterval 的话，定时器会永远保存下来，不能使用 destroyed 销毁。")]),e._v(" "),a("li",[e._v("一些特定的对象不能用，例如 window 和 document")])]),e._v(" "),a("p",[e._v("下面这个是重要的包")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" createRenderer "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'vue-server-renderer'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);