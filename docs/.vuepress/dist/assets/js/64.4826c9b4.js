(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{480:function(t,s,a){"use strict";a.r(s);var n=a(21),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"基础题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础题"}},[t._v("#")]),t._v(" 基础题")]),t._v(" "),a("p",[t._v("JavaScript 面试复习题集。如何将自己的兴趣和利益达到最大化呢？我们需经常去摸索自己正在走的这条道路是否符合自己，不断修正，终有抵达想要去的远方！")]),t._v(" "),a("h2",{attrs:{id:"_1、解释一下变量提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、解释一下变量提升"}},[t._v("#")]),t._v(" 1、解释一下变量提升")]),t._v(" "),a("ul",[a("li",[t._v("所有的声明都会提升到作用域的最顶上去。")]),t._v(" "),a("li",[t._v("函数声明的优先级高于变量声明的优先级，并且函数声明和函数定义的部分一起被提升。")])]),t._v(" "),a("h2",{attrs:{id:"_2、let和const区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、let和const区别"}},[t._v("#")]),t._v(" 2、let和const区别")]),t._v(" "),a("ul",[a("li",[t._v("let / const: 块级作用域、不存在变量提升、暂时性死区、不允许重复声明")]),t._v(" "),a("li",[t._v("const: 声明常量，无法修改（基本类型不可修改，引用类型如对象和数组，可以修改）")])]),t._v(" "),a("h2",{attrs:{id:"_3、es6-增加了哪些新特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、es6-增加了哪些新特性"}},[t._v("#")]),t._v(" 3、ES6+增加了哪些新特性")]),t._v(" "),a("ul",[a("li",[t._v("声明 let / const")]),t._v(" "),a("li",[t._v("解构赋值")]),t._v(" "),a("li",[t._v("class / extend: 类声明与继承")]),t._v(" "),a("li",[t._v("Set / Map: 新的数据结构")]),t._v(" "),a("li",[t._v("箭头函数")]),t._v(" "),a("li",[t._v("promise")]),t._v(" "),a("li",[t._v("async/await")]),t._v(" "),a("li",[t._v("数组的扩展")]),t._v(" "),a("li",[t._v("对象的扩展")])]),t._v(" "),a("h2",{attrs:{id:"_4、async和await的用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、async和await的用途"}},[t._v("#")]),t._v(" 4、async和await的用途?")]),t._v(" "),a("blockquote",[a("p",[t._v("async 函数是 generator 函数的语法糖 ，async 函数始终返回一个 Promise，await 可以实现一个"),a("strong",[t._v("等待")]),t._v("的功能，async/await 被称为异步编程的"),a("code",[t._v("终极解决方案")]),t._v("，"),a("strong",[t._v("即用同步的形式书写异步代码")]),t._v("，并且能够更优雅的实现异步代码顺序执行以及在发生异步的错误时提供更精准的错误信息。")])]),t._v(" "),a("h2",{attrs:{id:"_5、null和undefined的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、null和undefined的区别"}},[t._v("#")]),t._v(" 5、null和undefined的区别")]),t._v(" "),a("p",[t._v('null表示一个"无"的对象，也就是该处不应该有值；而undefined表示未定义。')]),t._v(" "),a("h2",{attrs:{id:"_6、typeof-null-为什么是object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、typeof-null-为什么是object"}},[t._v("#")]),t._v(" 6、typeof null 为什么是object")]),t._v(" "),a("blockquote",[a("p",[t._v("这个 bug 是第一版 Javascript 留下来的，javascript 中不同对象在底层都表示为二进制，而 javascript 中会把二进制前三位都为0的判断为 object 类型，而 null 的二进制表示全都是0，自然前三位也是0，所以执行typeof时会返回 "),a("code",[t._v("object")]),t._v("。")])]),t._v(" "),a("ul",[a("li",[t._v("typeof null === 'object'; // true")]),t._v(" "),a("li",[t._v("null instanceof Object ; // false")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'str'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'string'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'number'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'number'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'boolean'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'undefined'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'symbol'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h2",{attrs:{id:"_7、0-1-0-2-为什么不等于-0-3-以及怎么等于-0-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、0-1-0-2-为什么不等于-0-3-以及怎么等于-0-3"}},[t._v("#")]),t._v(" 7、0.1+0.2 为什么不等于 0.3，以及怎么等于 0.3")]),t._v(" "),a("blockquote",[a("p",[t._v("原因在于在 javascript 中采用的 IEEE 754 的双精度标准，0.1 实际上等于 0.100000X 后面还有很多位，所以加起来不等于 0.3；(0.1+0.2).toFixed(2) == 0.3；toFixed() 是会四舍五入的；")])]),t._v(" "),a("h2",{attrs:{id:"_8、为什么要用-weakmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、为什么要用-weakmap"}},[t._v("#")]),t._v(" 8、为什么要用 weakMap")]),t._v(" "),a("blockquote",[a("p",[t._v("weak adj.（虚）弱的，无力（度）的； 微弱的；")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("WeakMap")]),t._v("只接受对象作为键名（"),a("code",[t._v("null")]),t._v("除外），不接受其他类型的值作为键名")]),t._v(" "),a("li",[a("code",[t._v("WeakMap")]),t._v("的键名所指向的对象，不计入垃圾回收机制，即一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用")]),t._v(" "),a("li",[a("code",[t._v("WeakMap")]),t._v("的设计目的在于，有时我们想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用")])]),t._v(" "),a("h2",{attrs:{id:"_9、commonjs-和-es6-模块的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9、commonjs-和-es6-模块的区别"}},[t._v("#")]),t._v(" 9、CommonJS 和 ES6 模块的区别")]),t._v(" "),a("ul",[a("li",[t._v("CommonJS 模块是运行时加载，ES6 Modules 是编译时输出接口")]),t._v(" "),a("li",[t._v("CommonJS 输出是值的拷贝；ES6 Modules 输出的是值的引用，被输出模块的内部的改变会影响引用的改变")]),t._v(" "),a("li",[t._v("CommonJs 导入的模块路径可以是一个表达式，因为它使用的是 require() 方法；而 ES6 Modules 只能是字符串")]),t._v(" "),a("li",[t._v("CommonJS this 指向当前模块，ES6 Modules this 指向undefined")]),t._v(" "),a("li",[t._v("且 ES6 Modules 中没有这些顶层变量：arguments、require、module、exports、__filename、__dirname")])]),t._v(" "),a("p",[t._v("关于第一个差异，是因为 CommonJS 加载的是一个对象（即 module.exports 属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。")]),t._v(" "),a("h2",{attrs:{id:"_10、js中有几个假值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10、js中有几个假值"}},[t._v("#")]),t._v(" 10、JS中有几个假值")]),t._v(" "),a("blockquote",[a("p",[t._v("只有六个假值：undefined 、 null 、NaN 、 0 、 '' 、 false\n函数构造函数，如 new Number 和 new Boolean 都是真值")])]),t._v(" "),a("h2",{attrs:{id:"_11、raf-和-ric-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11、raf-和-ric-是什么"}},[t._v("#")]),t._v(" 11、RAF 和 RIC 是什么")]),t._v(" "),a("ul",[a("li",[t._v("requestAnimationFrame：告诉浏览器在下次重绘之前执行传入的回调函数（通常是操作 dom，更新动画的函数）；由于是每帧执行一次，那结果就是每秒的执行次数与浏览器屏幕刷新次数一样，通常是每秒 60 次；")]),t._v(" "),a("li",[t._v("requestIdleCallback：会在浏览器空闲时间执行回调，也就是允许开发人员在主事件循环中执行优先级任务，而不影响一些延迟关键事件。如果有多个回调，会按照先进先出原则执行，但是当传入了 timeout，为了避免超时，有可能会打乱这个顺序；")])]),t._v(" "),a("blockquote",[a("p",[t._v("react 16.8 时间切片 fiber，就是利用了 RIC，但实际上 react 重写了此方法；")])]),t._v(" "),a("h2",{attrs:{id:"_12、escape、encodeuri、encodeuricomponent-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12、escape、encodeuri、encodeuricomponent-的区别"}},[t._v("#")]),t._v(" 12、escape、encodeURI、encodeURIComponent 的区别")]),t._v(" "),a("blockquote",[a("p",[t._v("这三个是 JavaScript 中可以对字符串编码的函数")])]),t._v(" "),a("ul",[a("li",[t._v("encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。")]),t._v(" "),a("li",[t._v("encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。")]),t._v(" "),a("li",[t._v("escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。")])]),t._v(" "),a("h2",{attrs:{id:"_13、说一下深拷贝和浅拷贝及常用实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13、说一下深拷贝和浅拷贝及常用实现方式"}},[t._v("#")]),t._v(" 13、说一下深拷贝和浅拷贝及常用实现方式")]),t._v(" "),a("ul",[a("li",[t._v("浅拷贝: 以赋值的形式拷贝引用对象，仍指向同一个地址，修改时原对象也会受到影响\n"),a("ul",[a("li",[t._v("赋值表达式 =")]),t._v(" "),a("li",[t._v("Object.assign")]),t._v(" "),a("li",[t._v("展开运算符(…)")])])]),t._v(" "),a("li",[t._v("深拷贝: 完全拷贝一个新对象，修改时原对象不再受到任何影响\n"),a("ul",[a("li",[t._v("JSON.parse(JSON.stringify(obj))")]),t._v(" "),a("li",[t._v("递归进行逐一赋值")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("使用JSON自带函数进行深拷贝有什么问题？")]),t._v(" "),a("ul",[a("li",[t._v("具有循环引用的对象时，报错")]),t._v(" "),a("li",[t._v("当值为函数或 undefined 时，无法拷贝")])])]),t._v(" "),a("h2",{attrs:{id:"_14、你觉得-json-parse-json-stringify-xx-实现深拷贝有什么问题-或者说有什么不适用的场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14、你觉得-json-parse-json-stringify-xx-实现深拷贝有什么问题-或者说有什么不适用的场景"}},[t._v("#")]),t._v(" 14、你觉得 JSON.parse(JSON.stringify(xx)) 实现深拷贝有什么问题？或者说有什么不适用的场景？")]),t._v(" "),a("blockquote",[a("p",[t._v("利用 JSON.stringify 将 js 对象序列化（ JSON 字符串），再使用 JSON.parse 来反序列化来还原js对象；")])]),t._v(" "),a("p",[a("strong",[t._v("使用可能会出现的问题")])]),t._v(" "),a("ul",[a("li",[t._v("如果obj里面存在时间对象，JSON.parse(JSON.stringify(obj)) 之后，时间对象变成了字符串")]),t._v(" "),a("li",[t._v("如果obj里有 RegExp、Error 对象，则序列化的结果将只得到空对象")]),t._v(" "),a("li",[t._v("如果obj里有函数，undefined，则序列化的结果会把函数，undefined 丢失")]),t._v(" "),a("li",[t._v("如果obj里有 NaN、Infinity 和 -Infinity，则序列化的结果会变成 null")]),t._v(" "),a("li",[t._v("JSON.stringify()只能序列化对象的可枚举的自有属性。如果obj中的对象是有构造函数生成的， 则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的constructor")]),t._v(" "),a("li",[t._v("如果对象中存在循环引用的情况也无法正确实现深拷贝")])]),t._v(" "),a("blockquote",[a("p",[t._v("对于对象中的一些函数对象、undefined等，序列化后会得到空对象")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("JSON.stringify() 其实可以接受三个参数，除了需要转化的js对象，还额外支持两个参数，第一个用于参数的过滤，支持数组和对象。如果是数组，表示指定返回当前对象的属性，如果是函数表示对当前对象的所有属性(包括子对象的属性)需要进行过滤.(第二个参数建议自己尝试)")]),t._v(" "),a("li",[t._v("JSON.parse也可以接受一个额外参数进行扩展，将要进行转换为js对象的JSON格式进行过滤转换。")])])]),t._v(" "),a("h2",{attrs:{id:"_15、apply-call-bind-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15、apply-call-bind-区别"}},[t._v("#")]),t._v(" 15、apply call bind 区别")]),t._v(" "),a("ul",[a("li",[t._v("三者都可以改变函数的 this 对象指向")]),t._v(" "),a("li",[t._v("三者第一个参数都是 this 要指向的对象，如果没有这个参数或参数为 undefined 或 null，则默认指向全局 window")]),t._v(" "),a("li",[t._v("三者都可以传参，但是 apply 是数组，而 call 是参数列表，且 apply 和 call 是一次性传入参数，而 bind 可以分为多次传入\nbind 是返回绑定 this 之后的函数，便于稍后调用；apply 、call 则是立即执行")]),t._v(" "),a("li",[t._v("bind() 会返回一个新的函数，如果这个返回的新的函数作为构造函数创建一个新的对象，那么此时 this 不再指向传入给 bind 的第一个参数，而是指向用 new 创建的实例")])]),t._v(" "),a("h2",{attrs:{id:"_16、原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16、原型链"}},[t._v("#")]),t._v(" 16、原型链")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Object.prototype")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Function.prototype")]),t._v("\nObject "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nFunction "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Function"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"_17、闭包是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17、闭包是什么"}},[t._v("#")]),t._v(" 17、闭包是什么")]),t._v(" "),a("blockquote",[a("p",[t._v("闭包就是能够读取其他函数内部变量的函数。闭包的用途：可以读取函数内部的变量，并且让这些变量的值始终保持在内存中。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出全为10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出相应的输出")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h2",{attrs:{id:"_18、nan是什么-用typeof会输出什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18、nan是什么-用typeof会输出什么"}},[t._v("#")]),t._v(" 18、NaN是什么，用typeof会输出什么")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Not a Number\n会输出 Number\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"_19、跨域问题如何解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19、跨域问题如何解决"}},[t._v("#")]),t._v(" 19、跨域问题如何解决")]),t._v(" "),a("blockquote",[a("p",[t._v("同源策略：浏览器安全策略，同协议、ip、端口的脚本才会执行。只要协议、域名、端口有任何一个不同，都被当作是不同的域js跨域是指通过js在不同的域之间进行数据传输或通信通过jsonp跨域")])]),t._v(" "),a("p",[t._v("(1) jsonp在页面上引入不同域上的js脚本文件实现请求不同域上的数据\n(2)通过script标签引入一个js文件\n(3) js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入\n注：需要服务器端的页面进行相应的配合\n(4) 通过修改document.domain来跨子域\n(5) 使用window.name来进行跨域\n(6) window对象有个name属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个window.name的，每个页面对window.name都有读写的权限，window.name是持久存在一个窗口载入过的所有页面中的，并不会因新页面的载入而进行重置。")]),t._v(" "),a("h2",{attrs:{id:"_20、用js实现判断一个变量是否为整数的函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20、用js实现判断一个变量是否为整数的函数"}},[t._v("#")]),t._v(" 20、用js实现判断一个变量是否为整数的函数")]),t._v(" "),a("p",[t._v("实现思路：先判断该变量是否为Number类型，以此来缩小范围，再判断该变量除以1后是否与原值全等，若全等则返回true，若不全等则返回false")]),t._v(" "),a("h2",{attrs:{id:"_21、进程和线程是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21、进程和线程是什么"}},[t._v("#")]),t._v(" 21、进程和线程是什么")]),t._v(" "),a("p",[t._v("线程是最小的执行单元，而进程由至少一个线程组成。如何调度进程和线程，完全由操作系统决定，程序自己不能决定什么时候执行，执行多长时间。")]),t._v(" "),a("ul",[a("li",[t._v("进程指计算机中已运行的程序。")]),t._v(" "),a("li",[t._v("线程指操作系统能够进行运算调度的最小单位。")])]),t._v(" "),a("h2",{attrs:{id:"_21、死锁是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21、死锁是什么"}},[t._v("#")]),t._v(" 21、死锁是什么")]),t._v(" "),a("p",[t._v("当两个以上的运算单元，双方都在等待对方停止运行，以获取系统资源，但是没有一方提前退出时，就称为死锁。")]),t._v(" "),a("h2",{attrs:{id:"_22、number-的存储空间是多大-如果后台发送了一个超过最大自己的数字怎么办"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22、number-的存储空间是多大-如果后台发送了一个超过最大自己的数字怎么办"}},[t._v("#")]),t._v(" 22、Number() 的存储空间是多大？如果后台发送了一个超过最大自己的数字怎么办")]),t._v(" "),a("p",[t._v("Math.pow(2, 53) ，53 为有效数字，会发生截断，等于 JS 能支持的最大数字。")]),t._v(" "),a("h2",{attrs:{id:"_23、事件委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23、事件委托"}},[t._v("#")]),t._v(" 23、事件委托")]),t._v(" "),a("p",[t._v("不给每个子节点设置事件监听器，而是设置在其父节点上，然后利用冒泡原理设置每一个子节点；")]),t._v(" "),a("p",[t._v("addEventListener 默认是冒泡，第三个参数为 false")]),t._v(" "),a("h2",{attrs:{id:"_24、new-一个函数发生了什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24、new-一个函数发生了什么"}},[t._v("#")]),t._v(" 24、new 一个函数发生了什么")]),t._v(" "),a("p",[t._v("构造调用：")]),t._v(" "),a("ul",[a("li",[t._v("创造一个全新的对象")]),t._v(" "),a("li",[t._v("这个对象会被执行 [[Prototype]] 连接，将这个新对象的 [[Prototype]] 链接到这个构造函数.prototype 所指向的对象")]),t._v(" "),a("li",[t._v("这个新对象会绑定到函数调用的 this")]),t._v(" "),a("li",[t._v("如果函数没有返回其他对象，那么 new 表达式中的函数调用会自动返回这个新对象")])]),t._v(" "),a("h2",{attrs:{id:"_25、symbol-有什么用处-symbol-iterator-是用来做什么的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25、symbol-有什么用处-symbol-iterator-是用来做什么的"}},[t._v("#")]),t._v(" 25、symbol 有什么用处？symbol.iterator 是用来做什么的？")]),t._v(" "),a("p",[t._v("可以用来表示一个独一无二的变量防止命名冲突。但是面试官问还有吗？我没想出其他的用处就直接答我不知道了，还可以利用 symbol 不会被常规的方法（除了 Object.getOwnPropertySymbols 外）遍历到，所以可以用来模拟私有变量。")]),t._v(" "),a("p",[t._v("主要用来提供遍历接口，布置了 symbol.iterator 的对象才可以使用 for···of 循环，可以统一处理数据结构。调用之后回返回一个遍历器对象，包含有一个 next 方法，使用 next 方法后有两个返回值 value 和 done 分别表示函数当前执行位置的值和是否遍历完毕。")]),t._v(" "),a("p",[t._v("Symbol.for() 可以在全局访问 symbol")])])}),[],!1,null,null,null);s.default=e.exports}}]);