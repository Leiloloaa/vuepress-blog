(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{497:function(a,t,r){"use strict";r.r(t);var v=r(21),o=Object(v.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("p",[a._v("小程序")]),a._v(" "),r("p",[a._v("说说小程序的三层架构")]),a._v(" "),r("p",[a._v("拆分逻辑层和渲染层有什么优势和劣势")]),a._v(" "),r("p",[a._v("小程序框架和普通H5框架的区别（比如Taro和RN）")]),a._v(" "),r("p",[a._v("小程序在安卓和iOS上的区别")]),a._v(" "),r("p",[a._v("为什么要用Taro？Taro是如何实现跨端的？")]),a._v(" "),r("p",[a._v("模版转换\ntaro首先要实现的就是进行模版转换，把 JSX 语法转换成可以在小程序运行的字符串模板。")]),a._v(" "),r("p",[a._v("模版转换的实现：\n模版转换主要是通过静态编译实现的，分为解析、转换、生成，三个阶段。")]),a._v(" "),r("p",[a._v("解析过程：babel 的核心编译器 babylon 是支持对 JSX 语法解析的，taro框架利用这个编译器，将JSX通过词法、语法分析，生成抽象语法树。")]),a._v(" "),r("p",[a._v("非常幸运的是 babel 的核心编译器 babylon 是支持对 JSX 语法的解析的，我们可以直接利用它来帮我们构造 AST，而我们需要专注的核心就是如何对 AST 进行转换操作，得出我们需要的新 AST，再将新 AST 进行递归遍历，生成小程序的模板。")]),a._v(" "),r("p",[a._v("转换过程：针对已经生成的AST（抽象语法树），taro框架会使用已经定义好的转换操作以及多端的组件库规则对它进行转换修改。")]),a._v(" "),r("p",[a._v("经@tarojs/transformer-wx转换，输出微信小程序模板：\n@tarojs/components：支持Web环境Nerv组件库，通过编译替换为目标平台的原生标签/组件\n@tarojs/taro-components-rn：支持ReactNative环境的React组件库\n生成过程：将新 AST 进行递归遍历，生成小程序的模板。")]),a._v(" "),r("p",[a._v("2、逻辑转换\n除了模版转换，还需要进行逻辑代码的转换，由于各端api存在差异，如网络请求，数据缓存等，所以为了弥补不同端的差异，Taro定制了统一的 API 标准，同时还为不同的端编写了相应的运行时框架，这些API可以直接使用，不用关心当前平台是否支持，因为运行时框架会抹平这些API差异。")]),a._v(" "),r("p",[a._v("组件库以及端能力都是依靠不同的端做不同实现来抹平差异")]),a._v(" "),r("p",[a._v("逻辑转换的实现：")]),a._v(" "),r("p",[a._v("运行时框架负责适配各端能力，以支持跑在上面的Taro业务代码，主要有3个作用：")]),a._v(" "),r("p",[a._v("适配组件化方案、配置选项等基础API")]),a._v(" "),r("p",[a._v("适配平台能力相关的API（如网络请求、支付、拍照等）")]),a._v(" "),r("p",[a._v("提供一些应用级的特性，如事件总线（Taro.Events、Taro.eventCenter）、运行环境相关的API（Taro.getEnv()、Taro.ENV_TYPE）、UI适配方案（Taro.initPxTransform()）等")]),a._v(" "),r("p",[a._v("实现上，@tarojs/taro是API适配的统一入口，编译时分平台替换：\n@tarojs/taro：只是一层空壳，提供API签名")]),a._v(" "),r("p",[a._v("平台适配相关的package有6个：\n@tarojs/taro-alipay：适配支付宝小程序\n@tarojs/taro-h5：适配Web\n@tarojs/taro-rn：适配ReactNative\n@tarojs/taro-swan：适配百度小程序\n@tarojs/taro-tt：适配头条小程序\n@tarojs/taro-qapp：适配快应用")]),a._v(" "),r("p",[a._v("taro通过模版转换和逻辑转换，实现了跨平台多端构建小程序。")]),a._v(" "),r("p",[a._v("Taro是如何兼容React和Vue的")]),a._v(" "),r("p",[a._v("Taro3和Taro2的区别")]),a._v(" "),r("p",[a._v("Taro的优化方案")]),a._v(" "),r("p",[a._v("小程序体积压缩的方案")])])}),[],!1,null,null,null);t.default=o.exports}}]);