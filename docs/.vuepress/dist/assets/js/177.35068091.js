(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{590:function(e,t,a){"use strict";a.r(t);var r=a(21),v=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),a("p",[e._v("目前 Docker20.x 是 Docker 的最新版本")]),e._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),a("p",[a("strong",[e._v("基础架构历史")])]),e._v(" "),a("ul",[a("li",[e._v("90年代是"),a("code",[e._v("传统服务器")]),e._v("，在一些公司都会买小型机、塔式服务器、刀片式服务器，一个服务器上跑一个服务（一种应用），缺点是大量服务器资源被浪费；")]),e._v(" "),a("li",[e._v("2000年开始流行"),a("code",[e._v("虚拟化技术")]),e._v("，代表是 VMware 和 VirtualBox 软件，在一个服务器上可以模拟出多台虚拟服务器，缺点是占有服务器资源较多，需要虚拟内存和CPU，占有服务器大量资源；")]),e._v(" "),a("li",[e._v("2005年-2015年"),a("code",[e._v("云技术Cloud")]),e._v("开始流行，这个时候产生了很多大型云服务商，国际的有亚马逊、国内的阿里云，都是这个时期成长起来的公司。云技术也为容器技术提供了良好的生长土壤。")]),e._v(" "),a("li",[e._v("2015年以后"),a("code",[e._v("Container（容器）时代")]),e._v("，现在无论是国际还是国内大厂，无一例外的都在使用容器技术。那最为出名的就是Docker。")])]),e._v(" "),a("blockquote",[a("p",[e._v("容器就想一个打包工具，打包的不仅是你的程序，也包括运行环境。就好比你把你的开发主机和开发程序完全复制了一份，别人拿到后就不需要搭建环境，也不需要根据环境进行调试，直接就可以运行了。")])]),e._v(" "),a("h2",{attrs:{id:"安装-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker"}},[e._v("#")]),e._v(" 安装 Docker")]),e._v(" "),a("ul",[a("li",[e._v("安装docker\n"),a("ul",[a("li",[e._v("yum install docker-io")])])]),e._v(" "),a("li",[e._v("启动docker\n"),a("ul",[a("li",[e._v("service docker start")])])]),e._v(" "),a("li",[e._v("查看docker是否启动成功\n"),a("ul",[a("li",[e._v("ps -ef|grep docker")])])])]),e._v(" "),a("h2",{attrs:{id:"安装-mysql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-mysql"}},[e._v("#")]),e._v(" 安装 Mysql")]),e._v(" "),a("ul",[a("li",[e._v("查询 Mysql\n"),a("ul",[a("li",[e._v("docker search mysql")])])]),e._v(" "),a("li",[e._v("安装 Mysql\n"),a("ul",[a("li",[e._v("docker pull mysql")])])]),e._v(" "),a("li",[e._v("查看镜像\n"),a("ul",[a("li",[e._v("docker images")])])]),e._v(" "),a("li",[e._v("运行\n"),a("ul",[a("li",[e._v("docker run --name MySQL -v /usr/MySQL/conf:/etc/mysql/conf.d -v /usr/MySQL/logs:/logs -v /usr/MySQL/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d -i -p 3306:3306 mysql:latest")]),e._v(" "),a("li",[e._v("一定要注意文件的路径")])])]),e._v(" "),a("li",[e._v("docker exec -it MySQL bash\n"),a("ul",[a("li",[e._v("进入mysql")])])])]),e._v(" "),a("h2",{attrs:{id:"attached模式在前台运行-detached模式在后台运行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#attached模式在前台运行-detached模式在后台运行"}},[e._v("#")]),e._v(" attached模式在前台运行，detached模式在后台运行")]),e._v(" "),a("p",[e._v("当你打开127.0.0.1网址的时候，PowerShell 上打印出了相关的日志（log），平且每访问一次，都会增加一条日志。也就是说 Docker 容器的日志会实时的展现到窗口并且占用此端口。这种模式叫做 attached 模式")]),e._v(" "),a("ul",[a("li",[e._v("detached 模式的开启方法，就是加一个参数 -d 或者 --detach")]),e._v(" "),a("li",[e._v("Docker 提供了两个模式间的转换 docker attach "),a("code",[e._v("<ID or Image Name>")])])]),e._v(" "),a("p",[a("strong",[e._v("detached 模式下查看日志")])]),e._v(" "),a("p",[e._v("用detached模式开启一个nginx服务，并映射服务器的80端口。")]),e._v(" "),a("blockquote",[a("p",[e._v("docker container run -d -p 80:80 nginx")])]),e._v(" "),a("p",[e._v("容器被运行起来了，是detached模式，也就是Docker 的后台运行模式。这时候想要查看后台日志，可以使用下面的命令查看。")]),e._v(" "),a("blockquote",[a("p",[e._v("docker container logs "),a("code",[e._v("<ID or Image name>")])])]),e._v(" "),a("p",[e._v("虽然日志在窗口中出现了，但只打印一次logs,如果想动态一直跟踪日志，可以在命令上加入一个-f。")]),e._v(" "),a("blockquote",[a("p",[e._v("docker container logs -f "),a("code",[e._v("<ID or Image name>")]),e._v("\n输入完上面的命令，打开浏览器，在地址栏输入127.0.0.1，也就是访问本地的nginx服务。你会看到日志窗口就会跟踪到最新的日志。")])]),e._v(" "),a("p",[e._v("如果想关闭日志跟踪模式，直接用快捷键Ctrl+C就可以结束掉了。")]),e._v(" "),a("h2",{attrs:{id:"docker-的交互模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-的交互模式"}},[e._v("#")]),e._v(" Docker 的交互模式")]),e._v(" "),a("p",[e._v("有时候容器的镜像不是简单的一个服务，而是需要交互的操作系统。例如创建一个 Ubuntu 系统，然后需要到系统里输入各种 Shell 命令和系统进行交互。这时候 attached 模式和 detached 模式就不能满足要求了。需要使用交互模式。")]),e._v(" "),a("p",[a("strong",[e._v("使用 Ubuntu 镜像并开启交互模式")])]),e._v(" "),a("blockquote",[a("p",[e._v("docker container run -it ubuntu sh")])]),e._v(" "),a("p",[e._v("-it 代表启用交互模式，sh 代表可以使用Shell脚本。当你输入后，Docker就会进入到交互模式。可以使用 ls 来得到目录下的文件，也可以使用 hostname 来查看计算机名称。")]),e._v(" "),a("p",[e._v("这时候你想退出容器和交互模式可以输入 exit 命令。需要重点说明的是，随着命令退出后，容器也会跟着退出，变成 Exited 模式。")]),e._v(" "),a("p",[a("strong",[e._v("detached模式下的交互")])]),e._v(" "),a("p",[e._v("如果我们想退出交互，但是并不想停止容器。可以先开启detached模式，然后通过命令进入交互模式。我们来操作一下,先删除所有的容器。")]),e._v(" "),a("blockquote",[a("p",[e._v("docker container rm -f $(docker container ls -aq)")])]),e._v(" "),a("p",[e._v("然后再用detached模式创建一个nginx镜像的容器。")]),e._v(" "),a("blockquote",[a("p",[e._v("docker container run -d -p 80:80 nginx")])]),e._v(" "),a("p",[e._v("直接通过下面的命令就可以进入到交互模式下了。(这是我们以后要经常使用的一个命令)")]),e._v(" "),a("blockquote",[a("p",[e._v("docker exec -it "),a("code",[e._v("<ID or Image name>")]),e._v(" sh")])]),e._v(" "),a("p",[e._v("exec 是执行的意思，-it 交互模式 ，sh 交互的方式，用 shell 脚本进行交互")]),e._v(" "),a("p",[e._v("整个命令的意思是：用 shell 脚本的方式执行交互模式。")]),e._v(" "),a("p",[e._v("进入后可以使用 ls 来查看容器的文件系统。")]),e._v(" "),a("p",[e._v("这种模式的优点是，再使用 exit 退出后，服务并不会停止，而只是退出了交互模式。可以自己尝试一下退出，然后使用 docker container ls -a 来查看一下容器的状态，你会发现依然是 up状态。")]),e._v(" "),a("h2",{attrs:{id:"获取镜像-image-的三个基本途径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取镜像-image-的三个基本途径"}},[e._v("#")]),e._v(" 获取镜像 image 的三个基本途径")]),e._v(" "),a("ul",[a("li",[e._v("从网络社区直接拉取，在Docker里这种社区叫做Registry(登记处)的意思。（pull from registry）")]),e._v(" "),a("li",[e._v("从"),a("code",[e._v("Dockerfile")]),e._v("构建一个镜像，这种像是DIY一个镜像，但是整个构建过程是需要联网，因为需要西在基础镜像，然后根据基础镜像进行构建（build from Dockerfile）。")]),e._v(" "),a("li",[e._v("自有文件的导入，可以从本地导入已经构建好的镜像文件，在没有网络的时候可以用。这个文件是通过 已有的镜像导出来的压缩包，然后就可以进行使用了。")])]),e._v(" "),a("h2",{attrs:{id:"什么是dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是dockerfile"}},[e._v("#")]),e._v(" 什么是Dockerfile")]),e._v(" "),a("blockquote",[a("p",[e._v("Dockerfile 是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。Docker 通过读取 Dockerfile 中的指令自动生成映像。")])]),e._v(" "),a("ul",[a("li",[e._v("Dockerfile 是用于构建 docker 镜像的文件")]),e._v(" "),a("li",[e._v("Dockerfile 里包含了构建镜像所需的”指令“")]),e._v(" "),a("li",[e._v("Dockerfile 有其特定的语法规则（重要学习）")])]),e._v(" "),a("p",[a("strong",[e._v("Demo-执行Python程序")])]),e._v(" "),a("p",[e._v("有这样一个需求，制作一个镜像。镜像的操作系统是Ubuntu最新版，然后在系统上运行word.py程序。Python程序的内容非常简单，只要打印出Hello word，就可以了。")]),e._v(" "),a("p",[e._v("第一步，安装一个Ubuntu系统")]),e._v(" "),a("p",[e._v("第二步，下载安装Python环境")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("apt-get update && \\\nDEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y python3.9 python3-pip python3.9-dev\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("第三步，准备word.py文件。这个可以在D盘新建一个DockerTest文件夹，然后在文件夹中新建一个word.py文件，然后编写下面的文件。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('print("Hello word")\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("第四步，运行word.py")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ python3 hello.py\nhello docker\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("这是我们拆解的步骤，有步骤之后，我们看看如何写一个Dockerfile文件（建议把Dockerfile文件和word.py文件放在一起个文件夹下）")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('FROM ubuntu:latest\nRUN  apt-get update && \\\n         DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y python3.9 python3-pip python3.9-dev\nADD word.py /\nCMD ["python3","word.py"]\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("这算是最简单的一个Dockerfile文件的编写，有了这个文件之后，下节就可以动过Dockerfile来构建一个镜像了。这节你只要对镜像的构建有所了解就可以了。")])])}),[],!1,null,null,null);t.default=v.exports}}]);